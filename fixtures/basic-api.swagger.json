{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "basic-api"
  },
  "basePath": "/api",
  "paths": {
    "/Users/{id}/accessTokens/{fk}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find a related item by id for accessTokens.",
        "operationId": "User.prototype.__findById__accessTokens",
        "parameters": [
          {
            "name": "fk",
            "in": "path",
            "description": "Foreign key for accessTokens",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete a related item by id for accessTokens.",
        "operationId": "User.prototype.__destroyById__accessTokens",
        "parameters": [
          {
            "name": "fk",
            "in": "path",
            "description": "Foreign key for accessTokens",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update a related item by id for accessTokens.",
        "operationId": "User.prototype.__updateById__accessTokens",
        "parameters": [
          {
            "name": "fk",
            "in": "path",
            "description": "Foreign key for accessTokens",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/{id}/accessTokens": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Queries accessTokens of User.",
        "operationId": "User.prototype.__get__accessTokens",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccessToken"
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Creates a new instance in accessTokens of this model.",
        "operationId": "User.prototype.__create__accessTokens",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes all accessTokens of this model.",
        "operationId": "User.prototype.__delete__accessTokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Users/{id}/accessTokens/count": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Counts accessTokens of User.",
        "operationId": "User.prototype.__count__accessTokens",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new instance of the model and persist it into the data source.",
        "operationId": "User.create",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Patch an existing model instance or insert a new one into the data source.",
        "operationId": "User.patchOrCreate",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Replace an existing model instance or insert a new one into the data source.",
        "operationId": "User.replaceOrCreate__put_Users",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find all instances of the model matched by filter from the data source.",
        "operationId": "User.find",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/replaceOrCreate": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Replace an existing model instance or insert a new one into the data source.",
        "operationId": "User.replaceOrCreate__post_Users_replaceOrCreate",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/upsertWithWhere": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
        "operationId": "User.upsertWithWhere",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/{id}/exists": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "User.exists__get_Users_{id}_exists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "exists": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/{id}": {
      "head": {
        "tags": [
          "User"
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "User.exists__head_Users_{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "exists": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find a model instance by {{id}} from the data source.",
        "operationId": "User.findById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Replace attributes for a model instance and persist it into the data source.",
        "operationId": "User.replaceById__put_Users_{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete a model instance by {{id}} from the data source.",
        "operationId": "User.deleteById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Patch attributes for a model instance and persist it into the data source.",
        "operationId": "User.prototype.patchAttributes",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/User"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/{id}/replace": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Replace attributes for a model instance and persist it into the data source.",
        "operationId": "User.replaceById__post_Users_{id}_replace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/findOne": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find first instance of the model matched by filter from the data source.",
        "operationId": "User.findOne",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/update": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Update instances of the model matched by {{where}} from the data source.",
        "operationId": "User.updateAll",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "description": "Information related to the outcome of the operation",
              "type": "object",
              "properties": {
                "count": {
                  "description": "The number of instances updated",
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/count": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Count instances of the model matched by where from the data source.",
        "operationId": "User.count",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/change-stream": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a change stream.",
        "operationId": "User.createChangeStream__post_Users_change-stream",
        "parameters": [
          {
            "name": "options",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "file"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Create a change stream.",
        "operationId": "User.createChangeStream__get_Users_change-stream",
        "parameters": [
          {
            "name": "options",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "file"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Login a user with username/email and password.",
        "operationId": "User.login",
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Related objects to include in the response. See the description of return value for more details.",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "description": "The response body contains properties of the AccessToken created on login.\nDepending on the value of `include` parameter, the body may contain additional properties:\n\n  - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)\n\n",
              "type": "object"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/logout": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Logout a user with access token.",
        "operationId": "User.logout",
        "parameters": [

        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Users/{id}/verify": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Trigger user's identity verification with configured verifyOptions",
        "operationId": "User.prototype.verify",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Users/confirm": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Confirm a user registration with identity verification token.",
        "operationId": "User.confirm",
        "parameters": [
          {
            "name": "uid",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "redirect",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Users/reset": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Reset password for a user with email.",
        "operationId": "User.resetPassword",
        "parameters": [
          {
            "name": "options",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Users/change-password": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Change a user's password.",
        "operationId": "User.changePassword",
        "parameters": [
          {
            "name": "oldPassword",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "newPassword",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Users/reset-password": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Reset user's password via a password-reset token.",
        "operationId": "User.setPassword",
        "parameters": [
          {
            "name": "newPassword",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Documents/{id}/subdocuments/{fk}": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "Find a related item by id for subdocuments.",
        "operationId": "document.prototype.__findById__subdocuments",
        "parameters": [
          {
            "name": "fk",
            "in": "path",
            "description": "Foreign key for subdocuments",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "id",
            "in": "path",
            "description": "document id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/subdocument"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "document"
        ],
        "summary": "Delete a related item by id for subdocuments.",
        "operationId": "document.prototype.__destroyById__subdocuments",
        "parameters": [
          {
            "name": "fk",
            "in": "path",
            "description": "Foreign key for subdocuments",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "id",
            "in": "path",
            "description": "document id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "document"
        ],
        "summary": "Update a related item by id for subdocuments.",
        "operationId": "document.prototype.__updateById__subdocuments",
        "parameters": [
          {
            "name": "fk",
            "in": "path",
            "description": "Foreign key for subdocuments",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/subdocument"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "document id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/subdocument"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Documents/{id}/subdocuments": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "Queries subdocuments of document.",
        "operationId": "document.prototype.__get__subdocuments",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "id",
            "in": "path",
            "description": "document id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/subdocument"
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "document"
        ],
        "summary": "Creates a new instance in subdocuments of this model.",
        "operationId": "document.prototype.__create__subdocuments",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/subdocument"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "document id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/subdocument"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "document"
        ],
        "summary": "Deletes all subdocuments of this model.",
        "operationId": "document.prototype.__delete__subdocuments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "document id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Documents/{id}/subdocuments/count": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "Counts subdocuments of document.",
        "operationId": "document.prototype.__count__subdocuments",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "id",
            "in": "path",
            "description": "document id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Documents": {
      "post": {
        "tags": [
          "document"
        ],
        "summary": "Create a new instance of the model and persist it into the data source.",
        "operationId": "document.create",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/document"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/document"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "document"
        ],
        "summary": "Patch an existing model instance or insert a new one into the data source.",
        "operationId": "document.patchOrCreate",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/document"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/document"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "document"
        ],
        "summary": "Replace an existing model instance or insert a new one into the data source.",
        "operationId": "document.replaceOrCreate__put_Documents",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/document"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/document"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "document"
        ],
        "summary": "Find all instances of the model matched by filter from the data source.",
        "operationId": "document.find",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/document"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Documents/replaceOrCreate": {
      "post": {
        "tags": [
          "document"
        ],
        "summary": "Replace an existing model instance or insert a new one into the data source.",
        "operationId": "document.replaceOrCreate__post_Documents_replaceOrCreate",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/document"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/document"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Documents/upsertWithWhere": {
      "post": {
        "tags": [
          "document"
        ],
        "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
        "operationId": "document.upsertWithWhere",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/document"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/document"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Documents/{id}/exists": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "document.exists__get_Documents_{id}_exists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "exists": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Documents/{id}": {
      "head": {
        "tags": [
          "document"
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "document.exists__head_Documents_{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "exists": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "document"
        ],
        "summary": "Find a model instance by {{id}} from the data source.",
        "operationId": "document.findById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/document"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "document"
        ],
        "summary": "Replace attributes for a model instance and persist it into the data source.",
        "operationId": "document.replaceById__put_Documents_{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/document"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/document"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "document"
        ],
        "summary": "Delete a model instance by {{id}} from the data source.",
        "operationId": "document.deleteById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "document"
        ],
        "summary": "Patch attributes for a model instance and persist it into the data source.",
        "operationId": "document.prototype.patchAttributes",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/document"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "document id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/document"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Documents/{id}/replace": {
      "post": {
        "tags": [
          "document"
        ],
        "summary": "Replace attributes for a model instance and persist it into the data source.",
        "operationId": "document.replaceById__post_Documents_{id}_replace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/document"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/document"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Documents/findOne": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "Find first instance of the model matched by filter from the data source.",
        "operationId": "document.findOne",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/document"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Documents/update": {
      "post": {
        "tags": [
          "document"
        ],
        "summary": "Update instances of the model matched by {{where}} from the data source.",
        "operationId": "document.updateAll",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/document"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "description": "Information related to the outcome of the operation",
              "type": "object",
              "properties": {
                "count": {
                  "description": "The number of instances updated",
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Documents/count": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "Count instances of the model matched by where from the data source.",
        "operationId": "document.count",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Documents/change-stream": {
      "post": {
        "tags": [
          "document"
        ],
        "summary": "Create a change stream.",
        "operationId": "document.createChangeStream__post_Documents_change-stream",
        "parameters": [
          {
            "name": "options",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "file"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "document"
        ],
        "summary": "Create a change stream.",
        "operationId": "document.createChangeStream__get_Documents_change-stream",
        "parameters": [
          {
            "name": "options",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "file"
            }
          }
        },
        "deprecated": false
      }
    },
    "/SubDocuments/{id}/document": {
      "get": {
        "tags": [
          "subdocument"
        ],
        "summary": "Fetches belongsTo relation document.",
        "operationId": "subdocument.prototype.__get__document",
        "parameters": [
          {
            "name": "refresh",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "id",
            "in": "path",
            "description": "subdocument id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/document"
            }
          }
        },
        "deprecated": false
      }
    },
    "/SubDocuments": {
      "post": {
        "tags": [
          "subdocument"
        ],
        "summary": "Create a new instance of the model and persist it into the data source.",
        "operationId": "subdocument.create",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/subdocument"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/subdocument"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "subdocument"
        ],
        "summary": "Patch an existing model instance or insert a new one into the data source.",
        "operationId": "subdocument.patchOrCreate",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/subdocument"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/subdocument"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "subdocument"
        ],
        "summary": "Replace an existing model instance or insert a new one into the data source.",
        "operationId": "subdocument.replaceOrCreate__put_SubDocuments",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/subdocument"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/subdocument"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "subdocument"
        ],
        "summary": "Find all instances of the model matched by filter from the data source.",
        "operationId": "subdocument.find",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/subdocument"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/SubDocuments/replaceOrCreate": {
      "post": {
        "tags": [
          "subdocument"
        ],
        "summary": "Replace an existing model instance or insert a new one into the data source.",
        "operationId": "subdocument.replaceOrCreate__post_SubDocuments_replaceOrCreate",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/subdocument"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/subdocument"
            }
          }
        },
        "deprecated": false
      }
    },
    "/SubDocuments/upsertWithWhere": {
      "post": {
        "tags": [
          "subdocument"
        ],
        "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
        "operationId": "subdocument.upsertWithWhere",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/subdocument"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/subdocument"
            }
          }
        },
        "deprecated": false
      }
    },
    "/SubDocuments/{id}/exists": {
      "get": {
        "tags": [
          "subdocument"
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "subdocument.exists__get_SubDocuments_{id}_exists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "exists": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/SubDocuments/{id}": {
      "head": {
        "tags": [
          "subdocument"
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "subdocument.exists__head_SubDocuments_{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "exists": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "subdocument"
        ],
        "summary": "Find a model instance by {{id}} from the data source.",
        "operationId": "subdocument.findById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/subdocument"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "subdocument"
        ],
        "summary": "Replace attributes for a model instance and persist it into the data source.",
        "operationId": "subdocument.replaceById__put_SubDocuments_{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/subdocument"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/subdocument"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "subdocument"
        ],
        "summary": "Delete a model instance by {{id}} from the data source.",
        "operationId": "subdocument.deleteById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "subdocument"
        ],
        "summary": "Patch attributes for a model instance and persist it into the data source.",
        "operationId": "subdocument.prototype.patchAttributes",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/subdocument"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "subdocument id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/subdocument"
            }
          }
        },
        "deprecated": false
      }
    },
    "/SubDocuments/{id}/replace": {
      "post": {
        "tags": [
          "subdocument"
        ],
        "summary": "Replace attributes for a model instance and persist it into the data source.",
        "operationId": "subdocument.replaceById__post_SubDocuments_{id}_replace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/subdocument"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/subdocument"
            }
          }
        },
        "deprecated": false
      }
    },
    "/SubDocuments/findOne": {
      "get": {
        "tags": [
          "subdocument"
        ],
        "summary": "Find first instance of the model matched by filter from the data source.",
        "operationId": "subdocument.findOne",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/subdocument"
            }
          }
        },
        "deprecated": false
      }
    },
    "/SubDocuments/update": {
      "post": {
        "tags": [
          "subdocument"
        ],
        "summary": "Update instances of the model matched by {{where}} from the data source.",
        "operationId": "subdocument.updateAll",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/subdocument"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "description": "Information related to the outcome of the operation",
              "type": "object",
              "properties": {
                "count": {
                  "description": "The number of instances updated",
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/SubDocuments/count": {
      "get": {
        "tags": [
          "subdocument"
        ],
        "summary": "Count instances of the model matched by where from the data source.",
        "operationId": "subdocument.count",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/SubDocuments/change-stream": {
      "post": {
        "tags": [
          "subdocument"
        ],
        "summary": "Create a change stream.",
        "operationId": "subdocument.createChangeStream__post_SubDocuments_change-stream",
        "parameters": [
          {
            "name": "options",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "file"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "subdocument"
        ],
        "summary": "Create a change stream.",
        "operationId": "subdocument.createChangeStream__get_SubDocuments_change-stream",
        "parameters": [
          {
            "name": "options",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "file"
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "tags": [
    {
      "name": "User"
    },
    {
      "name": "document"
    },
    {
      "name": "subdocument"
    }
  ],
  "consumes": [
    "application/json",
    "application/x-www-form-urlencoded",
    "application/xml",
    "text/xml"
  ],
  "produces": [
    "application/json",
    "application/xml",
    "text/xml",
    "application/javascript",
    "text/javascript"
  ],
  "definitions": {
    "x-any": {
      "properties": {
      }
    },
    "AccessToken": {
      "properties": {
        "id": {
          "type": "string"
        },
        "ttl": {
          "default": 1209600,
          "description": "time to live in seconds (2 weeks by default)",
          "type": "number",
          "format": "double"
        },
        "scopes": {
          "description": "Array of scopes granted to this access token.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "userId": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "id"
      ],
      "additionalProperties": false
    },
    "User": {
      "properties": {
        "realm": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean"
        },
        "id": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "email"
      ],
      "additionalProperties": false
    },
    "subdocument": {
      "properties": {
        "documentId": {
          "type": "number",
          "format": "double"
        },
        "name": {
          "type": "string"
        },
        "data": {
          "type": "object"
        },
        "id": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "documentId",
        "name",
        "data"
      ],
      "additionalProperties": false
    },
    "document": {
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "data": {
          "type": "object"
        },
        "id": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "name"
      ],
      "additionalProperties": false
    }
  }
}
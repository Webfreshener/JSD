// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var SchemaRoller, _global, _kinds, ref,
    slice = [].slice;

  _global = typeof exports !== "undefined" && exports !== null ? exports : window;

  if (typeof Object.assign != 'function') {
    Object.assign = function(target) {
      var index, key, source;
      if (target == null) {
        throw new TypeError('Cannot convert undefined or null to object');
      }
      target = Object(target);
      index = 1;
      while (index < arguments.length) {
        source = arguments[index];
        if (source != null) {
          for (key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        index = index + 1;
      }
      return target;
    };
  }

  if (!((_global != null) && _global.hasOwnProperty('wfUtils'))) {
    (function() {
          'use strict';
          var _global, wfUtils;
        
          if (typeof _global === "undefined" || _global === null) {
            _global = typeof exports !== "undefined" && exports !== null ? exports : window;
          }
        
          _global.wfUtils = wfUtils = {
            Fun: {},
            Obj: {},
            Str: {}
          };
        
          wfUtils.Fun.getFunctionName = function(fun) {
            var n;
            if ((n = fun.toString().match(/function+\s{1,}([a-zA-Z_0-9\$]*)/)) != null) {
              return n[1];
            } else {
              return null;
            }
          };
          
          wfUtils.Fun.getConstructorName = function(fun) {
            var name, ref;
            if (fun.constructor.name === 'Function') {
              fun = (ref = fun()) != null ? ref : new fun;
            }
            if ((name = this.getFunctionName(fun.constructor)) != null) {
              return name;
            } else {
              return null;
            }
          };
          
          wfUtils.Fun.construct = function(constructor, args) {
            return new (constructor.bind.apply(constructor, [null].concat(args)));
          };
          
          wfUtils.Fun.factory = wfUtils.Fun.construct.bind(null, Function);
          
          wfUtils.Fun.fromString = function(string) {
            var m;
            if ((m = string.replace(/\n/g, '').replace(/[\s]{2,}/g, '').match(/^function+\s\(([a-zA-Z0-9_\s,]*)\)+\s?\{+(.*)\}+$/)) != null) {
              return wfUtils.Fun.factory([].concat(m[1], m[2]));
            } else {
              if ((m = string.match(new RegExp("^Native::(" + ((Object.keys(this.natives)).join('|')) + ")+$"))) != null) {
                return this.natives[m[1]];
              } else {
                return null;
              }
            }
          };
          
          wfUtils.Fun.toString = function(fun) {
            var s;
            if (typeof fun !== 'function') {
              return fun;
            }
            if (((s = fun.toString()).match(/.*\[native code\].*/)) != null) {
              return "Native::" + (this.getFunctionName(fun));
            } else {
              return s;
            }
          };
          
          wfUtils.Fun.natives = {
            Array: Array,
            ArrayBuffer: ArrayBuffer,
            Boolean: Boolean,
            Buffer: ArrayBuffer,
            Date: Date,
            Number: Number,
            Object: Object,
            String: String,
            Function: Function
          };
          
          wfUtils.Obj.getTypeOf = function(obj) {
            return Object.prototype.toString.call(obj).slice(8, -1);
          };
          
          wfUtils.Obj.isOfType = function(value, kind) {
            return (this.getTypeOf(value)) === (wfUtils.Fun.getFunctionName(kind)) || value instanceof kind;
          };
          
          wfUtils.Obj.objectToQuery = function(object) {
            var i, j, keys, pairs, ref;
            if (object == null) {
              object = {};
            }
            pairs = [];
            keys = Object.keys(object);
            for (i = j = 0, ref = keys.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
              pairs[i] = [keys[i], object[keys[i]]];
            }
            return (pairs.map((function(_this) {
              return function(v, k) {
                return v.join('=');
              };
            })(this))).join('&');
          };
          
          wfUtils.Obj.queryToObject = function(string) {
            var o;
            o = {};
            decodeURIComponent(string).replace('?', '').split('&').forEach((function(_this) {
              return function(v, k) {
                var p;
                if ((p = v.split('=')).length === 2) {
                  return o[p[0]] = p[1];
                }
              };
            })(this));
            return o;
          };
          
          wfUtils.Str.capitalize = function(string) {
            if (string == null) {
              return '';
            }
            return "" + (string.charAt(0).toUpperCase()) + (string.slice(1));
          };
          
          wfUtils.Str.stripNull = function(string) {
            if (typeof string === 'undefined') {
              return '';
            }
            return string.replace(/\0/g, '');
          };
          
        
        }).call(this);
        
  }

  _kinds = {};

  SchemaRoller = (function() {
    function SchemaRoller() {
      var _schemaRef;
      _kinds = {
        Array: Array,
        ArrayBuffer: ArrayBuffer,
        Boolean: Boolean,
        Buffer: ArrayBuffer,
        Date: Date,
        Number: Number,
        Object: Object,
        String: String,
        Function: Function
      };
      this.getClass = (function(_this) {
        return function() {
          var _r, arg, classesOrNames, i, j, len, len1, n, ref;
          classesOrNames = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          for (i = 0, len = classesOrNames.length; i < len; i++) {
            arg = classesOrNames[i];
            if (typeof arg === 'object') {
              if (Array.isArray(arg)) {
                _r = [];
                for (j = 0, len1 = arg.length; j < len1; j++) {
                  n = arg[j];
                  switch (typeof n) {
                    case 'string':
                      _r.push(_this.getClass(n));
                      break;
                    case 'function':
                      _r.push(n);
                      break;
                    default:
                      _r.push(Array.isArray(n) ? _this.getClass.apply(_this, n) : null);
                  }
                }
                return (!(0 <= _r.indexOf(null)) ? {
                  _r: null
                } : void 0);
              }
              return null;
            }
            return (ref = _kinds[arg]) != null ? ref : null;
          }
          return null;
        };
      })(this);
      this.registerClass = function(name, clazz) {
        return _kinds[name] = clazz;
      };
      this.unregisterClass = function(name) {
        if (_kinds.hasOwnProperty(name)) {
          return delete _kinds[name];
        }
      };
      this.listClasses = function() {
        return Object.keys(_kinds);
      };
      this.fromJSON = function(json) {
        switch (typeof json) {
          case 'string':
            return new Schema(JSON.parse(json));
          case 'object':
            return new Schema(json);
        }
        throw new Error("json must be either JSON formatted string or object");
      };
      _schemaRef = {
        type: {
          type: this.listClasses(),
          required: true
        },
        required: 'Boolean',
        extensible: 'Boolean',
        restrict: 'String',
        validate: 'Function',
        "default": 'Boolean',
        elements: ['Array', 'Object']
      };
      this.getSchemaRef = function() {
        return _schemaRef;
      };
      this.getDefaults = function() {
        var _def;
        return _def = {
          type: '*',
          required: false,
          extensible: false
        };
      };
    }

    return SchemaRoller;

  })();

  ((ref = typeof module !== "undefined" && module !== null ? module.exports : void 0) != null ? ref : window)['SchemaRoller'] = function() {
    var Schema, SchemaValidator, ValidatorBuilder, Vector,
          slice = [].slice;
        
        SchemaValidator = (function() {
          function SchemaValidator(_schema, opts1) {
            var _errorMsg, _o, _oKey, _s, i, j, len, len1, obj, ref, ref1;
            if (_schema == null) {
              _schema = {};
            }
            this.opts = opts1 != null ? opts1 : {
              extensible: false
            };
            _errorMsg = null;
            this.isValid = function() {
              return _errorMsg || true;
            };
            ref = Object.keys(_schema);
            for (i = 0, len = ref.length; i < len; i++) {
              _oKey = ref[i];
              switch (typeof _schema[_oKey]) {
                case "string":
                  obj = {};
                  obj[_oKey] = {
                    type: _global.wfUtils.Str.capitalize(_schema[_oKey], {
                      required: false
                    })
                  };
                  _o = Object.assign(_schema, obj);
                  _errorMsg = this.validateSchemaEntry(_oKey, _schema[_oKey]);
                  break;
                case "object":
                  if (!Array.isArray(_schema[_oKey])) {
                    _errorMsg = this.validateSchemaEntry(_oKey, _schema[_oKey]);
                  } else {
                    ref1 = _schema[_oKey];
                    for (j = 0, len1 = ref1.length; j < len1; j++) {
                      _s = ref1[j];
                      if (typeof _schema[_oKey][_s] === 'string') {
                        _errorMsg = this.validateTypeString(_oKey, _schema[_oKey][_s]);
                      } else {
                        _errorMsg = this.validateSchemaEntry(_oKey, _schema[_oKey][_s]);
                      }
                    }
                  }
                  break;
                case "boolean":
                  _errorMsg = this.validateSchemaEntry(_oKey, _schema[_oKey]);
                  break;
                default:
                  _errorMsg = "value for schema element '" + _oKey + "' was invalid";
              }
            }
          }
        
          SchemaValidator.prototype.validateTypeString = function(key, _type) {
            var e, error;
            if (key.match(/\.restrict+$/)) {
              if (typeof _type !== 'string') {
                return 'restrict requires a Regular Expression String';
              }
              try {
                "text".match(new RegExp(_type));
              } catch (error) {
                e = error;
                if (!_type.match(_schemaroller_.rx)) {
                  return "Regular Expression provided for '" + key + "' was invalid";
                }
              }
            } else if (((_schemaroller_.getClass(_global.wfUtils.Str.capitalize(_type))) != null) === false) {
              return "type '<" + _type + ">' for schema element '" + key + "' was invalid";
            }
            return true;
          };
        
          SchemaValidator.prototype.validateSchemaEntry = function(key, params, opts) {
            var _fn, _k, _kind, _p, _schemaKeys, _t, _type, eMsg, i, j, keyPath, l, len, len1, len2, len3, m, param, ref, ref1, ref2, ref3, sKey, xKey;
            if (opts == null) {
              opts = this.opts;
            }
            _schemaKeys = _schemaroller_.getSchemaRef();
            if (params == null) {
              return key + " was null or undefined";
            }
            if (typeof params === 'string') {
              return this.validateTypeString(key + "." + sKey, params);
            }
            if (typeof params === 'object') {
              if (!params.hasOwnProperty("type")) {
                if ((_p = (keyPath = key.split('.')).pop()) !== 'elements') {
                  if (_p !== 'default') {
                    return "value for schema element '" + key + "' was malformed. Property 'type' was missing";
                  }
                } else {
                  ref = Object.keys(params);
                  for (i = 0, len = ref.length; i < len; i++) {
                    param = ref[i];
                    this.validateSchemaEntry((keyPath.join('.')) + "." + param, params[param]);
                    return;
                  }
                }
              }
              if ((_schemaroller_.getClass(params.type)) == null) {
                if (Object.keys(params).length === 0) {
                  return true;
                }
                if (typeof params.type === 'object') {
                  return this.validateSchemaEntry(key, params.type);
                }
                return "value for schema element '" + key + "' has invalid type '<" + params.type + ">'";
              }
              ref1 = Object.keys(params);
              for (j = 0, len1 = ref1.length; j < len1; j++) {
                sKey = ref1[j];
                if (!((_schemaKeys[sKey] != null) || opts.extensible)) {
                  return "schema element '" + key + "." + sKey + "' is not allowed";
                }
                if (typeof params[sKey] === "string") {
                  _kind = _global.wfUtils.Str.capitalize(params[sKey]);
                  if (!((_schemaKeys[sKey] != null) || opts.extensible)) {
                    return "schema element '" + key + "." + sKey + "' is not allowed";
                  }
                  if (typeof (eMsg = this.validateTypeString(key + "." + sKey, params[sKey])) === 'string') {
                    return eMsg;
                  }
                }
                if (typeof _schemaKeys[sKey] === 'object') {
                  _type = _schemaKeys[sKey].type;
                  if (!Array.isArray(_type)) {
                    if (_type !== _kind) {
                      return "invalid schema element '" + key + "' requires type '" + _type + "' type was '<" + _kind + ">'";
                    }
                  }
                } else {
                  if (Array.isArray(params[sKey])) {
                    ref2 = params[sKey];
                    for (l = 0, len2 = ref2.length; l < len2; l++) {
                      _k = ref2[l];
                      if (typeof (eMsg = this.validateSchemaEntry(key + "." + sKey, _k)) === 'string') {
                        return eMsg;
                      }
                    }
                  } else {
                    if (sKey !== 'elements') {
                      if (typeof (eMsg = this.validateSchemaEntry(key + "." + sKey, params[sKey])) === 'string') {
                        return eMsg;
                      }
                    } else {
                      ref3 = params[sKey];
                      for (m = 0, len3 = ref3.length; m < len3; m++) {
                        xKey = ref3[m];
                        if (typeof (eMsg = this.validateSchemaEntry(key + "." + xKey, params[sKey][xKey])) === 'string') {
                          return eMsg;
                        }
                      }
                    }
                    if (typeof (eMsg = this.validateSchemaEntry(key + "." + sKey, params[sKey])) === 'string') {
                      return eMsg;
                    }
                    return true;
                  }
                }
              }
              return true;
            } else {
              _t = typeof params;
              if (_t !== 'function') {
                if (_schemaKeys[key.split('.').pop()] !== _global.wfUtils.Str.capitalize(_t)) {
                  return "value for schema element '" + key + "' has invalid type '<" + _t + ">'";
                }
              } else {
                if ((_fn = _global.wfUtils.Fun.getConstructorName(params)) !== _schemaKeys[key]) {
                  return "value for schema element '" + key + "' has invalid class or method '<" + _fn + ">'";
                }
              }
              return true;
            }
            return "unable to process schema element '" + key + "'";
          };
        
          return SchemaValidator;
        
        })();
        
        ValidatorBuilder = (function() {
          function ValidatorBuilder() {
            var _buildValidator, _validators;
            _validators = {};
            _buildValidator = (function(_this) {
              return function(_ref, _path) {
                var _v;
                _v = [_ref];
                if (Array.isArray(_ref)) {
                  _v = _ref.map(function(_s) {
                    return _buildValidator(_s, _path);
                  });
                }
                return _validators[_path] = function(value) {
                  var _x, fName, i, len, ref, vItm;
                  for (i = 0, len = _v.length; i < len; i++) {
                    vItm = _v[i];
                    if (vItm.required && !(value != null)) {
                      return "'" + _path + "' is reuqired";
                    }
                    switch (typeof value) {
                      case 'string':
                        if (typeof vItm === 'object') {
                          _x = (ref = vItm.type) != null ? ref : null;
                        }
                        if (_x == null) {
                          _x = vItm;
                        }
                        if (!(vItm === 'String' || _x.match(/^string$/i))) {
                          return _path + " requires " + _x + " type was 'String'";
                        }
                        if (vItm.restrict != null) {
                          if (((new RegExp(vItm.restrict)).exec(value)) == null) {
                            return "value '" + value + "' for " + _path + " did not match required expression";
                          }
                        }
                        return true;
                      case 'function':
                        _x = typeof vItm === 'string' ? vItm : _global.wfUtils.Fun.getConstructorName(vItm);
                        return _x === _global.wfUtils.Fun.getConstructorName(value);
                      case 'object':
                        if (!(typeof value.validate === "function" ? value.validate() : void 0)) {
                          return false;
                        }
                        break;
                      case 'number':
                        _x = (vItm.type != null) && typeof vItm.type === 'string' ? _schemaroller_.getClass(vItm.type) : vItm.type;
                        if (_x == null) {
                          _x = vItm;
                        }
                        if (_x === 'Number') {
                          return true;
                        }
                        if ((fName = _global.wfUtils.Fun.getFunctionName(_x)) !== 'Number') {
                          return "'" + _path + "' expected " + fName + ", type was '<Number>'";
                        }
                        return !isNaN(new _x(value));
                      default:
                        _x = typeof vItm.type === 'string' ? _schemaroller_.getClass(vItm.type) : vItm.type;
                        return (_x != null) && value instanceof _x;
                    }
                  }
                  return false;
                };
              };
            })(this);
            this.list = function() {
              return Object.keys(_validators);
            };
            this.get = function(path) {
              var ref;
              return (ref = _validators[path]) != null ? ref : null;
            };
            this.set = function(_path, func) {
              if (!((func != null) && typeof func === 'function')) {
                return "2nd argument expects a function";
              }
              return _validators[path] = func;
            };
            this.create = function(_ref, _path) {
              return _buildValidator.apply(this, arguments);
            };
            this.exec = function(_path, value) {
              return typeof _validators[_path] === "function" ? _validators[_path](value != null ? value : "validator for '" + _path + "' does not exist") : void 0;
            };
          }
        
          ValidatorBuilder.getInstance = function() {
            return this.__instance != null ? this.__instance : this.__instance = new this;
          };
        
          return ValidatorBuilder;
        
        })();
        
        Vector = (function() {
          'use strict';
          function Vector() {
            var _check, _list, _t, _type, items;
            _type = arguments[0], items = 2 <= arguments.length ? slice.call(arguments, 1) : [];
            _list = [];
            if (!Array.isArray(_type)) {
              _t = typeof _type;
              if (_t === 'string') {
                _type = [_type];
              }
              if (_t.match(/^(function|object)$/)) {
                _type = [_type];
              }
              if (_t === null || _t === 'Function') {
                _type = ['*'];
              }
            }
            _check = function(item) {
              var i, len;
              for (i = 0, len = _type.length; i < len; i++) {
                _t = _type[i];
                if ((typeof _t === 'string') && _t.match(/^(\*|ALL)$/)) {
                  return true;
                }
                if (!(_t = _schemaroller_.getClass(_t))) {
                  return false;
                }
                if (!_global.wfUtils.Obj.isOfType(item, _t)) {
                  return false;
                }
              }
              return true;
            };
            this.getItemAt = (function(_this) {
              return function(idx) {
                if (_list.length = idx + 1) {
                  return _list[idx];
                } else {
                  return null;
                }
              };
            })(this);
            this.setItemAt = (function(_this) {
              return function(idx, item) {
                if (!_check(item)) {
                  return false;
                }
                _list.splice(idx, 0, item);
                return _this;
              };
            })(this);
            this.removeItemAt = (function(_this) {
              return function(idx, item) {
                if (!(idx <= _list.length)) {
                  return false;
                }
                return _list.splice(idx, 1, item);
              };
            })(this);
            this.replaceAll = (function(_this) {
              return function(array) {
                var i, itm, len;
                _this.reset();
                for (i = 0, len = array.length; i < len; i++) {
                  itm = array[i];
                  _this.addItem(itm);
                }
                return _this;
              };
            })(this);
            this.replaceItemAt = (function(_this) {
              return function(idx, item) {
                if (!_check(item)) {
                  return false;
                }
                if (!(idx <= _list.length)) {
                  return false;
                }
                if (idx <= _list.length) {
                  _list.splice(idx, 1);
                }
                return _this;
              };
            })(this);
            this.addItem = (function(_this) {
              return function(item) {
                return _this.setItemAt(_list.length, item);
              };
            })(this);
            this.shift = (function(_this) {
              return function() {
                return _list.shift();
              };
            })(this);
            this.unshift = (function(_this) {
              return function() {
                var items;
                items = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                items.forEach(function(item) {
                  return _this.setItemAt(0, item);
                });
                return _this;
              };
            })(this);
            this.pop = (function(_this) {
              return function() {
                return _list.shift();
              };
            })(this);
            this.push = (function(_this) {
              return function() {
                var items;
                items = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                items.forEach(function(item) {
                  return _this.addItem(item);
                });
                return _this;
              };
            })(this);
            this.reset = (function(_this) {
              return function() {
                _list = [];
                return _this;
              };
            })(this);
            this.length = (function(_this) {
              return function() {
                return _list.length;
              };
            })(this);
            this.sort = (function(_this) {
              return function(func) {
                _list.sort(func);
                return _this;
              };
            })(this);
            this.values = (function(_this) {
              return function() {
                return _list.values();
              };
            })(this);
            this.toString = (function(_this) {
              return function() {
                return _list.toString();
              };
            })(this);
            if (items != null) {
              this.push(items);
            }
          }
        
          return Vector;
        
        })();
        
        Schema = (function() {
          'use strict';
          function Schema(_o, opts) {
            var _getKinds, _hasRequiredFields, _oE, _object, _required_elements, _schema_validator, _validate, _validators, _walkSchema, eMsg, i, len, ref;
            if (_o == null) {
              _o = {};
            }
            if (opts == null) {
              opts = {
                extensible: false
              };
            }
            _object = {};
            _required_elements = [];
            _validators = {};
            if (_o.elements != null) {
              ref = Object.keys(_o.elements);
              for (i = 0, len = ref.length; i < len; i++) {
                _oE = ref[i];
                if ((_o.elements[_oE].required != null) && _o.elements[_oE].required) {
                  _required_elements.push(_oE);
                }
              }
            }
            _hasRequiredFields = (function(_this) {
              return function(obj) {
                var j, key, len1, oKeys;
                oKeys = Object.keys(obj);
                for (j = 0, len1 = _required_elements.length; j < len1; j++) {
                  key = _required_elements[j];
                  if (!(0 <= oKeys.indexOf(key))) {
                    return "required property '" + key + "' is missing";
                  }
                }
                return true;
              };
            })(this);
            _schema_validator = new SchemaValidator(_o, opts);
            if (typeof (eMsg = _schema_validator.isValid()) === 'string') {
              throw eMsg;
            }
            (_walkSchema = (function(_this) {
              return function(obj) {
                var _k, j, len1, ref1, results;
                ref1 = (Array.isArray(obj) ? obj : Object.keys(obj));
                results = [];
                for (j = 0, len1 = ref1.length; j < len1; j++) {
                  _k = ref1[j];
                  ValidatorBuilder.getInstance().create(obj[_k], _k);
                  if (obj[_k].hasOwnProperty("elements" && typeof obj[_k].elements === "object")) {
                    results.push(_walkSchema(obj[_k].elements));
                  } else {
                    results.push(void 0);
                  }
                }
                return results;
              };
            })(this))(_o.elements || {});
            _validate = function(key, value) {
              var msg, ref1;
              if (!(0 <= ((ref1 = ValidatorBuilder.getInstance().list()) != null ? ref1.indexOf(key) : void 0))) {
                if (!opts.extensible) {
                  return "'" + key + "' is not a valid schema property";
                }
              }
              if (typeof (msg = ValidatorBuilder.getInstance().exec(key, value)) === 'string') {
                return "validator for '" + key + "' failed. " + msg;
              }
              return true;
            };
            _getKinds = (function(_this) {
              return function(_s) {
                var _elems;
                _elems = Object.keys(_s).map(function(key) {
                  if (_s[key].type != null) {
                    return _s[key].type;
                  } else {
                    return null;
                  }
                });
                _elems = _elems.filter(function(elem) {
                  return elem !== null;
                });
                if (_elems.length) {
                  return _elems;
                } else {
                  return null;
                }
              };
            })(this);
            this.get = (function(_this) {
              return function(key) {
                return _object[key];
              };
            })(this);
            this.set = (function(_this) {
              return function(key, value) {
                var _extensible, _f, _kinds, _s, _schema, j, k, len1, ref1, ref2, ref3, v;
                if (typeof key === 'object') {
                  if (typeof (_f = _hasRequiredFields(Object.assign({}, _object, key))) === 'string') {
                    return _f;
                  }
                  for (k in key) {
                    v = key[k];
                    if (typeof (eMsg = _this.set(k, v)) === 'string') {
                      return eMsg;
                    }
                  }
                } else {
                  _schema = (ref1 = _o.elements) != null ? ref1 : _o;
                  _extensible = _o.extensible != null ? _o.extensible : opts.extensible || false;
                  ref2 = key.split('.');
                  for (j = 0, len1 = ref2.length; j < len1; j++) {
                    k = ref2[j];
                    if ((_schema[k] != null) && _schema[k].hasOwnProperty('extensible')) {
                      _extensible = _schema[k].extensible;
                    }
                    _schema = _schema.elements != null ? _schema.elements[k] : _schema[k];
                    if (_schema == null) {
                      if (!_extensible) {
                        return "element '" + k + "' is not a valid element";
                      }
                      _schema = {
                        type: '*',
                        required: true,
                        extensible: false
                      };
                    }
                  }
                  if (typeof value === 'object') {
                    if (_schema != null) {
                      if (!Array.isArray(value)) {
                        _s = new Schema((ref3 = _schema.elements) != null ? ref3 : _schema, {
                          extensible: _extensible
                        });
                      } else {
                        if (Array.isArray((_kinds = _getKinds(_schema)))) {
                          _kinds = _kinds.map(function(itm) {
                            switch (typeof itm) {
                              case 'string':
                                return itm;
                              case 'object':
                                if (itm.hasOwnProperty('type')) {
                                  return itm.type;
                                }
                            }
                          });
                          _kinds = _kinds.filter(function(itm) {
                            return itm != null;
                          });
                          _kinds = _kinds.length ? _kinds : '*';
                        }
                        _s = new Vector(_kinds || '*');
                      }
                    }
                    if (_schema == null) {
                      return "'" + key + "' was invalid";
                    }
                    value = _s[_s instanceof Vector ? 'replaceAll' : 'set'](value);
                    if ((typeof value) === 'string') {
                      return value;
                    }
                  } else {
                    if ((typeof (eMsg = _validate(key, value))) === 'string') {
                      return eMsg;
                    }
                  }
                  _object[key] = value;
                }
                return _this;
              };
            })(this);
            this.validate = (function(_this) {
              return function(cB) {
                return _validate(cB);
              };
            })(this);
            this.has = (function(_this) {
              return function(key) {
                return _object.hasOwnProperty(key);
              };
            })(this);
            this.del = (function(_this) {
              return function(key) {
                if (_this.has(key)) {
                  return delete _object[key];
                }
              };
            })(this);
            this.forEach = (function(_this) {
              return function(iterator, scope) {
                var _results, key;
                _results = [];
                for (key in _object) {
                  if (!_object.hasOwnProperty(key)) {
                    continue;
                  }
                  _results.push(iterator.call(scope, _object[key], key));
                }
                return _results;
              };
            })(this);
            this.keys = (function(_this) {
              return function() {
                var keys;
                keys = [];
                _this.forEach(function(value, key) {
                  return keys.push(key);
                });
                return keys;
              };
            })(this);
            this.valueOf = (function(_this) {
              return function() {
                return _object;
              };
            })(this);
            this.toJSON = (function(_this) {
              return function() {
                return _object;
              };
            })(this);
            this.toString = (function(_this) {
              return function(pretty) {
                if (pretty == null) {
                  pretty = false;
                }
                return JSON.stringify(_this.toJSON(), null, (pretty ? 2 : void 0));
              };
            })(this);
            this.canFreeze = (function(_this) {
              return function() {
                return typeof Object.freeze === 'function';
              };
            })(this);
            this.freeze = (function(_this) {
              return function() {
                if (_this.canFreeze()) {
                  Object.freeze(_this);
                  Object.freeze(_object);
                }
                return _this;
              };
            })(this);
            this.isFrozen = (function(_this) {
              return function() {
                if (_this.canFreeze()) {
                  return Object.isFrozen(_object);
                } else {
                  return false;
                }
              };
            })(this);
            this.canSeal = (function(_this) {
              return function() {
                return typeof Object.seal === 'function';
              };
            })(this);
            this.seal = (function(_this) {
              return function() {
                if (_this.canSeal()) {
                  Object.seal(_this);
                  Object.seal(_object);
                }
                return _this;
              };
            })(this);
            this.isSealed = (function(_this) {
              return function() {
                if (_this.canSeal()) {
                  return Object.isSealed(_object);
                } else {
                  return false;
                }
              };
            })(this);
            this.canPreventExtensions = (function(_this) {
              return function() {
                return typeof Object.preventExtensions === 'function';
              };
            })(this);
            this.isExtensible = (function(_this) {
              return function() {
                if (_this.canPreventExtensions()) {
                  return Object.isExtensible(_object);
                } else {
                  return true;
                }
              };
            })(this);
            this.preventExtensions = (function(_this) {
              return function() {
                if (_this.canPreventExtensions()) {
                  Object.preventExtensions(_this);
                  Object.preventExtensions(_object);
                }
                return _this;
              };
            })(this);
          }
        
          return Schema;
        
        })();
        
    var _sKeys, _schemaroller_;
    _schemaroller_ = new SchemaRoller;
    _schemaroller_.registerClass('Schema', _schemaroller_.Schema = Schema);
    _schemaroller_.registerClass('Vector', _schemaroller_.Vector = Vector);
    _sKeys = Object.keys(_schemaroller_.getSchemaRef());
    if (_schemaroller_.rx == null) {
      _schemaroller_.rx = new RegExp("^((" + (_sKeys.join('|')) + ")+,?){" + _sKeys.length + "}$");
    }
    return _schemaroller_;
  };

}).call(this);

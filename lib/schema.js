// Generated by CoffeeScript 1.10.0
var Fun, Schema, SchemaRoller, Vector;

Fun = require('fun-utils').Fun;

Vector = require('./vector');

if (typeof Object.assign != 'function') {
  Object.assign = function(target) {
    'use strict';
    var index, key, source;
    if (target == null) {
      throw new TypeError('Cannot convert undefined or null to object');
    }
    target = Object(target);
    index = 1;
    while (index < arguments.length) {
      source = arguments[index];
      if (source != null) {
        for (key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      index = index + 1;
    }
    return target;
  };
}

Schema = (function() {
  'use strict';
  function Schema(_o, opts) {
    var _allowed_keys, _buildValidator, _hasRequiredFields, _oE, _oKey, _object, _required_elements, _s, _sKeys, _schemaKeys, _validate, _validateSchemaEntry, _validateTypeString, _validators, _walkSchema, escapeKey, i, j, l, len, len1, len2, obj, ref, ref1, ref2, rx, unescapeKey, validValue;
    if (_o == null) {
      _o = {};
    }
    if (opts == null) {
      opts = {
        extensible: false
      };
    }
    _object = {};
    _required_elements = [];
    _schemaKeys = {
      type: {
        type: ['String', 'Function', 'Object'],
        required: true
      },
      required: 'Boolean',
      extensible: 'Boolean',
      restrict: 'String',
      validate: 'Function',
      "default": 'Boolean',
      elements: ['Array', 'Object']
    };
    escapeKey = function(key) {
      if (key.length > 2 && key.charCodeAt(0) === 95 && key.charCodeAt(1) === 95) {
        return key + "%";
      } else {
        return "" + key;
      }
    };
    unescapeKey = function(key) {
      if (key.length > 2 && key.charCodeAt(0) === 95 && key.charCodeAt(1) === 95) {
        return "" + (key.substr(0, key.length - 1));
      } else {
        return "" + key;
      }
    };
    _validators = {};
    _buildValidator = (function(_this) {
      return function(_ref, _path) {
        var _v;
        _v = [_ref];
        if (Array.isArray(_ref)) {
          _v = _ref.map(function(_s) {
            return _buildValidator(_s, path);
          });
        }
        return _validators[_path] = function(value) {
          var _x, i, len, vItm;
          for (i = 0, len = _v.length; i < len; i++) {
            vItm = _v[i];
            if (vItm.required && !(value != null)) {
              return false;
            }
            switch (typeof value) {
              case 'string':
                if (!vItm.type.match(/^string$/i)) {
                  return false;
                }
                if ((vItm.restrict != null) && (new RegExp(vItm.restrict)).exec(value)) {
                  return false;
                }
                return true;
              case 'function':
                _x = typeof vItm === 'string' ? vItm : Fun.getConstructorName(vItm);
                return _x === Fun.getConstructorName(value);
              case 'object':
                if (!(typeof value.validate === "function" ? value.validate() : void 0)) {
                  return false;
                }
                break;
              default:
                _x = typeof vItm.type === 'string' ? SchemaRoller.getClass(vItm.type) : vItm.type;
                return (_x != null) && value instanceof _x;
            }
          }
          return false;
        };
      };
    })(this);
    if (_o.elements != null) {
      ref = Object.keys(_o.elements);
      for (i = 0, len = ref.length; i < len; i++) {
        _oE = ref[i];
        if ((_o.elements[_oE].required != null) && _o.elements[_oE].required) {
          _required_elements.push(_oE);
        }
      }
    }
    _hasRequiredFields = (function(_this) {
      return function(obj) {
        var j, key, len1, oKeys;
        oKeys = Object.keys(obj);
        for (j = 0, len1 = _required_elements.length; j < len1; j++) {
          key = _required_elements[j];
          if (!(0 <= oKeys.indexOf(key))) {
            return false;
          }
        }
        return true;
      };
    })(this);
    _allowed_keys = Object.keys(_o);
    _sKeys = Object.keys(_schemaKeys);
    rx = new RegExp("^((" + (_sKeys.join('|')) + ")+,?){" + _sKeys.length + "}$");
    _validateTypeString = (function(_this) {
      return function(key, _type) {
        var e, error;
        if (key.match(/\.restrict+$/)) {
          if (typeof _type !== 'string') {
            throw 'restrict requires a Regular Expression String';
          }
          try {
            "text".match(new RegExp(_type));
          } catch (error) {
            e = error;
            if (!_type.match(rx)) {
              throw "Regular Expression provided for '" + key + "' was invalid";
            }
          }
        } else if (((SchemaRoller.getClass(_type.ucfirst())) != null) === false) {
          throw "type '<" + _type + ">' for schema element '" + key + "' was invalid";
        }
        return true;
      };
    })(this);
    _validateSchemaEntry = (function(_this) {
      return function(key, params) {
        var _fn, _k, _kind, _t, _type, j, keyPath, l, len1, len2, param, ref1, ref2, results, sKey;
        if (params == null) {
          throw key + " was null or undefined";
        }
        if (typeof params === 'string') {
          return _validateTypeString(key, params);
        }
        if (typeof params === 'object') {
          if (!params.hasOwnProperty("type")) {
            if ((keyPath = key.split('.')).pop() !== 'elements') {
              throw "value for schema element '" + key + "' was malformed. Property 'type' was missing";
            } else {
              ref1 = Object.keys(params);
              for (j = 0, len1 = ref1.length; j < len1; j++) {
                param = ref1[j];
                _validateSchemaEntry((keyPath.join('.')) + "." + param, params[param]);
                return;
              }
            }
          }
          if ((SchemaRoller.getClass(params.type)) == null) {
            throw "value for schema element '" + key + "' has invalid type '<" + params.type + ">'";
          }
          ref2 = Object.keys(params);
          results = [];
          for (l = 0, len2 = ref2.length; l < len2; l++) {
            sKey = ref2[l];
            if (!((_schemaKeys[sKey] != null) || opts.extensible)) {
              throw "schema element '" + key + "." + sKey + "' is not allowed";
            }
            if (typeof params[sKey] === "string") {
              _kind = params[sKey].ucfirst();
              if (!((_schemaKeys[sKey] != null) || opts.extensible)) {
                throw "schema element '" + key + "." + sKey + "' is not allowed";
              }
              if (typeof _schemaKeys[sKey] === 'object') {
                _type = _schemaKeys[sKey].type;
                if (!Array.isArray(_type)) {
                  if (_type !== _kind) {
                    throw "invalid schema element '" + key + "' requires type '" + _type + "' type was '<" + _kind + ">'";
                  } else {
                    results.push(void 0);
                  }
                } else {
                  _kind = _kind.ucfirst();
                  if (!(0 <= _type.indexOf(_kind))) {
                    throw "invalid schema element '" + key + "' requires type '" + _type + "' type was '<" + _kind + ">'";
                  } else {
                    results.push(void 0);
                  }
                }
              } else {
                results.push(_validateSchemaEntry(key + "." + sKey, params[sKey]));
              }
            } else {
              if (Array.isArray(params[sKey])) {
                results.push((function() {
                  var len3, m, ref3, results1;
                  ref3 = params[sKey];
                  results1 = [];
                  for (m = 0, len3 = ref3.length; m < len3; m++) {
                    _k = ref3[m];
                    results1.push(_validateSchemaEntry(key + "." + sKey, _k));
                  }
                  return results1;
                })());
              } else {
                results.push(_validateSchemaEntry(key + "." + sKey, params[sKey]));
              }
            }
          }
          return results;
        } else {
          _t = typeof params;
          if (_t !== 'function') {
            if (_schemaKeys[key.split('.').pop()] !== _t.ucfirst()) {
              throw "value for schema element '" + key + "' has invalid type '<" + _t + ">'";
            }
          } else {
            if ((_fn = Fun.getConstructorName(params)) !== _schemaKeys[key]) {
              throw "value for schema element '" + key + "' has invalid class or method '<" + _fn + ">'";
            }
          }
        }
      };
    })(this);
    ref1 = Object.keys(_o);
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      _oKey = ref1[j];
      switch (typeof _o[_oKey]) {
        case "string":
          obj = {};
          obj[_oKey] = {
            type: _o[_oKey].ucfirst(),
            required: false
          };
          _o = Object.assign(_o, obj);
          _validateSchemaEntry(_oKey, _o[_oKey]);
          break;
        case "object":
          if (!Array.isArray(_o[_oKey])) {
            _validateSchemaEntry(_oKey, _o[_oKey]);
          } else {
            ref2 = _o[_oKey];
            for (l = 0, len2 = ref2.length; l < len2; l++) {
              _s = ref2[l];
              if (typeof _o[_oKey][_s] === 'string') {
                _validateTypeString(_oKey, _o[_oKey][_s]);
              } else {
                _validateSchemaEntry(_oKey, _o[_oKey][_s]);
              }
            }
          }
          break;
        default:
          throw "value for schema element '" + _oKey + "' was invalid";
      }
    }
    (_walkSchema = (function(_this) {
      return function(obj) {
        var _k, len3, m, ref3, results;
        ref3 = (Array.isArray(obj) ? obj : Object.keys(obj));
        results = [];
        for (m = 0, len3 = ref3.length; m < len3; m++) {
          _k = ref3[m];
          _buildValidator(obj[_k], _k);
          if (obj[_k].hasOwnProperty("elements" && typeof obj[_k].elements === "object")) {
            results.push(_walkSchema(obj[_k].elements));
          } else {
            results.push(void 0);
          }
        }
        return results;
      };
    })(this))(_o);
    _validate = function(key, value) {
      var msg;
      if (!_validators.hasOwnProperty(key)) {
        return false;
      }
      if (!(msg = _validators[key](value))) {
        return msg;
      }
      return true;
    };
    validValue = function(val, restrict) {
      if (typeof restrict === 'string') {
        if (restrict.match(/^(typeof|cast)+:+/)) {
          return typeof val === (restrict.split(':')[1] || "").toLowerCase();
        }
        if (restrict.match(/^class:+/)) {
          return typeof val === 'object';
        } else {
          return val === restrict;
        }
      } else {
        if (typeof restrict === 'object' && restrict.length) {
          return 0 <= restrict.indexOf(val);
        }
      }
      return false;
    };
    this.get = (function(_this) {
      return function(key) {
        return _object[escapeKey(key)];
      };
    })(this);
    this.set = (function(_this) {
      return function(key, value) {
        var _schema, e, getKinds, k, len3, m, ref3, s, v;
        if (typeof key === 'string') {
          _schema = _o;
          ref3 = key.split('.');
          for (m = 0, len3 = ref3.length; m < len3; m++) {
            k = ref3[m];
            _schema = _schema[k];
          }
          if (typeof value === 'object') {
            if (!Array.isArray(value)) {
              if (!((e = (s = new Schema(_schema)).set(value)) instanceof Schema)) {
                throw e;
              }
              value = s;
            } else {
              getKinds = function() {
                var _elems;
                _elems = _schema.elements;
                if (!Array.isArray(_elems)) {
                  _elems = Object.keys(_schema.elements).map(function(key) {
                    return _schema.elements[key];
                  });
                }
                _elems.map(function(el) {
                  return el.type;
                });
                if (_elems.length) {
                  return _elems;
                } else {
                  return null;
                }
              };
              value = (new Schema(_schema)).set(new Vector(getKinds() || '*', value));
            }
          }
          if (!_validate(key, value)) {
            return false;
          }
          _object[key] = value;
        } else if (typeof key === 'object') {
          if (!_hasRequiredFields(Object.assign({}, _object, key))) {
            return false;
          }
          for (k in key) {
            v = key[k];
            if (!_this.set(k, v)) {
              return false;
            }
          }
        }
        return _this;
      };
    })(this);
    this.validate = (function(_this) {
      return function(cB) {
        return _validate(cB);
      };
    })(this);
    this.has = (function(_this) {
      return function(key) {
        return _object.hasOwnProperty(escapeKey(key));
      };
    })(this);
    this.del = (function(_this) {
      return function(key) {
        if (_this.has(key)) {
          return delete _object[escapeKey(key)];
        }
      };
    })(this);
    this.forEach = (function(_this) {
      return function(iterator, scope) {
        var _results, key;
        _results = [];
        for (key in _object) {
          if (!_object.hasOwnProperty(key)) {
            continue;
          }
          _results.push(iterator.call(scope, _object[key], unescapeKey(key)));
        }
        return _results;
      };
    })(this);
    this.keys = (function(_this) {
      return function() {
        var keys;
        keys = [];
        _this.forEach(function(value, key) {
          return keys.push(key);
        });
        return keys;
      };
    })(this);
    this.valueOf = (function(_this) {
      return function() {
        return _object;
      };
    })(this);
    this.toJSON = (function(_this) {
      return function() {
        return _object;
      };
    })(this);
    this.toString = (function(_this) {
      return function(pretty) {
        if (pretty == null) {
          pretty = false;
        }
        return JSON.stringify(_this.toJSON(), null, (pretty ? 2 : void 0));
      };
    })(this);
    this.canFreeze = (function(_this) {
      return function() {
        return typeof Object.freeze === 'function';
      };
    })(this);
    this.freeze = (function(_this) {
      return function() {
        if (_this.canFreeze()) {
          Object.freeze(_this);
          Object.freeze(_object);
        }
        return _this;
      };
    })(this);
    this.isFrozen = (function(_this) {
      return function() {
        if (_this.canFreeze()) {
          return Object.isFrozen(_object);
        } else {
          return false;
        }
      };
    })(this);
    this.canSeal = (function(_this) {
      return function() {
        return typeof Object.seal === 'function';
      };
    })(this);
    this.seal = (function(_this) {
      return function() {
        if (_this.canSeal()) {
          Object.seal(_this);
          Object.seal(_object);
        }
        return _this;
      };
    })(this);
    this.isSealed = (function(_this) {
      return function() {
        if (_this.canSeal()) {
          return Object.isSealed(_object);
        } else {
          return false;
        }
      };
    })(this);
    this.canPreventExtensions = (function(_this) {
      return function() {
        return typeof Object.preventExtensions === 'function';
      };
    })(this);
    this.isExtensible = (function(_this) {
      return function() {
        if (_this.canPreventExtensions()) {
          return Object.isExtensible(_object);
        } else {
          return true;
        }
      };
    })(this);
    this.preventExtensions = (function(_this) {
      return function() {
        if (_this.canPreventExtensions()) {
          Object.preventExtensions(_this);
          Object.preventExtensions(_object);
        }
        return _this;
      };
    })(this);
  }

  return Schema;

})();

SchemaRoller = (typeof module !== "undefined" && module !== null ? module.parent.exports : void 0) ? module.parent.exports.SchemaRoller : require('schemaroller');

SchemaRoller.registerClass("Schema", Schema);

module.exports = Schema;

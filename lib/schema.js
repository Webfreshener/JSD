// Generated by CoffeeScript 1.10.0
var Fun, Schema, SchemaRoller, SchemaValidator, ValidatorBuilder, Vector;

Fun = require('fun-utils').Fun;

Vector = require('./vector');

SchemaValidator = require('./_schemaValidator');

ValidatorBuilder = (require('./_validatorBuilder')).getInstance();

if (typeof Object.assign != 'function') {
  Object.assign = function(target) {
    'use strict';
    var index, key, source;
    if (target == null) {
      throw new TypeError('Cannot convert undefined or null to object');
    }
    target = Object(target);
    index = 1;
    while (index < arguments.length) {
      source = arguments[index];
      if (source != null) {
        for (key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      index = index + 1;
    }
    return target;
  };
}

Schema = (function() {
  'use strict';
  function Schema(_o, opts) {
    var _getKinds, _hasRequiredFields, _oE, _object, _required_elements, _schema_validator, _validate, _validators, _walkSchema, eMsg, i, len, ref;
    if (_o == null) {
      _o = {};
    }
    if (opts == null) {
      opts = {
        extensible: false
      };
    }
    _object = {};
    _required_elements = [];
    _validators = {};
    if (_o.elements != null) {
      ref = Object.keys(_o.elements);
      for (i = 0, len = ref.length; i < len; i++) {
        _oE = ref[i];
        if ((_o.elements[_oE].required != null) && _o.elements[_oE].required) {
          _required_elements.push(_oE);
        }
      }
    }
    _hasRequiredFields = (function(_this) {
      return function(obj) {
        var j, key, len1, oKeys;
        oKeys = Object.keys(obj);
        for (j = 0, len1 = _required_elements.length; j < len1; j++) {
          key = _required_elements[j];
          if (!(0 <= oKeys.indexOf(key))) {
            return "required property '" + key + "' is missing";
          }
        }
        return true;
      };
    })(this);
    _schema_validator = new SchemaValidator(_o, opts);
    if (typeof (eMsg = _schema_validator.isValid()) === 'string') {
      throw eMsg;
    }
    (_walkSchema = (function(_this) {
      return function(obj) {
        var _k, j, len1, ref1, results;
        ref1 = (Array.isArray(obj) ? obj : Object.keys(obj));
        results = [];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          _k = ref1[j];
          ValidatorBuilder.create(obj[_k], _k);
          if (obj[_k].hasOwnProperty("elements" && typeof obj[_k].elements === "object")) {
            results.push(_walkSchema(obj[_k].elements));
          } else {
            results.push(void 0);
          }
        }
        return results;
      };
    })(this))(_o.elements || {});
    _validate = function(key, value) {
      var msg, ref1;
      if (!(0 <= ((ref1 = ValidatorBuilder.list()) != null ? ref1.indexOf(key) : void 0))) {
        if (!opts.extensible) {
          return "'" + key + "' is not a valid schema property";
        }
      }
      if (typeof (msg = ValidatorBuilder.exec(key, value)) === 'string') {
        return "validator for '" + key + "' failed. " + msg;
      }
      return true;
    };
    _getKinds = (function(_this) {
      return function(_s) {
        var _elems;
        _elems = Object.keys(_s).map(function(key) {
          if (_s[key].type != null) {
            return _s[key].type;
          } else {
            return null;
          }
        });
        _elems = _elems.filter(function(elem) {
          return elem !== null;
        });
        if (_elems.length) {
          return _elems;
        } else {
          return null;
        }
      };
    })(this);
    this.get = (function(_this) {
      return function(key) {
        return _object[key];
      };
    })(this);
    this.set = (function(_this) {
      return function(key, value) {
        var _extensible, _f, _kinds, _s, _schema, j, k, len1, ref1, ref2, ref3, v;
        if (typeof key === 'object') {
          if (typeof (_f = _hasRequiredFields(Object.assign({}, _object, key))) === 'string') {
            return _f;
          }
          for (k in key) {
            v = key[k];
            if (typeof (eMsg = _this.set(k, v)) === 'string') {
              return eMsg;
            }
          }
        } else {
          _schema = (ref1 = _o.elements) != null ? ref1 : _o;
          _extensible = _o.extensible != null ? _o.extensible : opts.extensible || false;
          ref2 = key.split('.');
          for (j = 0, len1 = ref2.length; j < len1; j++) {
            k = ref2[j];
            if ((_schema[k] != null) && _schema[k].hasOwnProperty('extensible')) {
              _extensible = _schema[k].extensible;
            }
            _schema = _schema.elements != null ? _schema.elements[k] : _schema[k];
            if (_schema == null) {
              if (!_extensible) {
                return "element '" + k + "' is not a valid element";
              }
              _schema = {
                type: '*',
                required: true,
                extensible: false
              };
            }
          }
          if (typeof value === 'object') {
            if (_schema != null) {
              if (!Array.isArray(value)) {
                _s = new Schema((ref3 = _schema.elements) != null ? ref3 : _schema, {
                  extensible: _extensible
                });
              } else {
                if (Array.isArray((_kinds = _getKinds(_schema)))) {
                  _kinds = _kinds.map(function(itm) {
                    switch (typeof itm) {
                      case 'string':
                        return itm;
                      case 'object':
                        if (itm.hasOwnProperty('type')) {
                          return itm.type;
                        }
                    }
                  });
                  _kinds = _kinds.filter(function(itm) {
                    return itm != null;
                  });
                  _kinds = _kinds.length ? _kinds : '*';
                }
                _s = new Vector(_kinds || '*');
              }
            }
            if (_schema == null) {
              return "'" + key + "' was invalid";
            }
            value = _s[_s instanceof Vector ? 'replaceAll' : 'set'](value);
            if ((typeof value) === 'string') {
              return value;
            }
          } else {
            if ((typeof (eMsg = _validate(key, value))) === 'string') {
              return eMsg;
            }
          }
          _object[key] = value;
        }
        return _this;
      };
    })(this);
    this.validate = (function(_this) {
      return function(cB) {
        return _validate(cB);
      };
    })(this);
    this.has = (function(_this) {
      return function(key) {
        return _object.hasOwnProperty(key);
      };
    })(this);
    this.del = (function(_this) {
      return function(key) {
        if (_this.has(key)) {
          return delete _object[key];
        }
      };
    })(this);
    this.forEach = (function(_this) {
      return function(iterator, scope) {
        var _results, key;
        _results = [];
        for (key in _object) {
          if (!_object.hasOwnProperty(key)) {
            continue;
          }
          _results.push(iterator.call(scope, _object[key], key));
        }
        return _results;
      };
    })(this);
    this.keys = (function(_this) {
      return function() {
        var keys;
        keys = [];
        _this.forEach(function(value, key) {
          return keys.push(key);
        });
        return keys;
      };
    })(this);
    this.valueOf = (function(_this) {
      return function() {
        return _object;
      };
    })(this);
    this.toJSON = (function(_this) {
      return function() {
        return _object;
      };
    })(this);
    this.toString = (function(_this) {
      return function(pretty) {
        if (pretty == null) {
          pretty = false;
        }
        return JSON.stringify(_this.toJSON(), null, (pretty ? 2 : void 0));
      };
    })(this);
    this.canFreeze = (function(_this) {
      return function() {
        return typeof Object.freeze === 'function';
      };
    })(this);
    this.freeze = (function(_this) {
      return function() {
        if (_this.canFreeze()) {
          Object.freeze(_this);
          Object.freeze(_object);
        }
        return _this;
      };
    })(this);
    this.isFrozen = (function(_this) {
      return function() {
        if (_this.canFreeze()) {
          return Object.isFrozen(_object);
        } else {
          return false;
        }
      };
    })(this);
    this.canSeal = (function(_this) {
      return function() {
        return typeof Object.seal === 'function';
      };
    })(this);
    this.seal = (function(_this) {
      return function() {
        if (_this.canSeal()) {
          Object.seal(_this);
          Object.seal(_object);
        }
        return _this;
      };
    })(this);
    this.isSealed = (function(_this) {
      return function() {
        if (_this.canSeal()) {
          return Object.isSealed(_object);
        } else {
          return false;
        }
      };
    })(this);
    this.canPreventExtensions = (function(_this) {
      return function() {
        return typeof Object.preventExtensions === 'function';
      };
    })(this);
    this.isExtensible = (function(_this) {
      return function() {
        if (_this.canPreventExtensions()) {
          return Object.isExtensible(_object);
        } else {
          return true;
        }
      };
    })(this);
    this.preventExtensions = (function(_this) {
      return function() {
        if (_this.canPreventExtensions()) {
          Object.preventExtensions(_this);
          Object.preventExtensions(_object);
        }
        return _this;
      };
    })(this);
  }

  return Schema;

})();

SchemaRoller = (typeof module !== "undefined" && module !== null ? module.parent.exports : void 0) ? module.parent.exports.SchemaRoller : require('schemaroller');

SchemaRoller.registerClass("Schema", Schema);

module.exports = Schema;

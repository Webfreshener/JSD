// Generated by CoffeeScript 1.10.0
var Fun, SchemaRoller, ValidatorBuilder, _validators;

_validators = {};

Fun = require('fun-utils');

ValidatorBuilder = (function() {
  function ValidatorBuilder() {
    var _buildValidator;
    _buildValidator = (function(_this) {
      return function(_ref, _path) {
        var _v;
        _v = [_ref];
        if (Array.isArray(_ref)) {
          _v = _ref.map(function(_s) {
            return _buildValidator(_s, _path);
          });
        }
        return _validators[_path] = function(value) {
          var _x, fName, i, len, ref, vItm;
          for (i = 0, len = _v.length; i < len; i++) {
            vItm = _v[i];
            if (vItm.required && !(value != null)) {
              return "'" + _path + "' is reuqired";
            }
            switch (typeof value) {
              case 'string':
                if (typeof vItm === 'object') {
                  _x = (ref = vItm.type) != null ? ref : null;
                }
                if (_x == null) {
                  _x = vItm;
                }
                if (!(vItm === 'String' || _x.match(/^string$/i))) {
                  return _path + " requires " + _x + " type was 'String'";
                }
                if (vItm.restrict != null) {
                  if (((new RegExp(vItm.restrict)).exec(value)) == null) {
                    return "value '" + value + "' for " + _path + " did not match required expression";
                  }
                }
                return true;
              case 'function':
                _x = typeof vItm === 'string' ? vItm : Fun.getConstructorName(vItm);
                return _x === Fun.getConstructorName(value);
              case 'object':
                if (!(typeof value.validate === "function" ? value.validate() : void 0)) {
                  return false;
                }
                break;
              case 'number':
                _x = (vItm.type != null) && typeof vItm.type === 'string' ? SchemaRoller.getClass(vItm.type) : vItm.type;
                if (_x == null) {
                  _x = vItm;
                }
                if (_x === 'Number') {
                  return true;
                }
                if ((fName = Fun.getFunctionName(_x)) !== 'Number') {
                  return "'" + _path + "' expected " + fName + ", type was '<Number>'";
                }
                return !isNaN(new _x(value));
              default:
                _x = typeof vItm.type === 'string' ? SchemaRoller.getClass(vItm.type) : vItm.type;
                return (_x != null) && value instanceof _x;
            }
          }
          return false;
        };
      };
    })(this);
    this.list = function() {
      return Object.keys(_validators);
    };
    this.get = function(path) {
      var ref;
      return (ref = _validators[path]) != null ? ref : null;
    };
    this.set = function(_path, func) {
      if (!((func != null) && typeof func === 'function')) {
        return "2nd argument expects a function";
      }
      return _validators[path] = func;
    };
    this.create = function(_ref, _path) {
      return _buildValidator.apply(this, arguments);
    };
    this.exec = function(_path, value) {
      return typeof _validators[_path] === "function" ? _validators[_path](value != null ? value : "validator for '" + _path + "' does not exist") : void 0;
    };
  }

  ValidatorBuilder.getInstance = function() {
    return this.__instance != null ? this.__instance : this.__instance = new this;
  };

  return ValidatorBuilder;

})();

module.exports = ValidatorBuilder;

SchemaRoller = require('./schemaroller').SchemaRoller;

// Generated by CoffeeScript 1.10.0
var Fun, SchemaRoller, Vector, global, objUtil,
  slice = [].slice;

global = typeof exports !== "undefined" && exports !== null ? exports : window;

objUtil = require('obj-utils');

Fun = require('fun-utils').Fun;

Vector = (function() {
  'use strict';
  function Vector() {
    var _check, _list, _t, _type, items;
    _type = arguments[0], items = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    _list = [];
    if (!Array.isArray(_type)) {
      _t = typeof _type;
      if (_t === 'string') {
        _type = [_type];
      }
      if (_t.match(/^(function|object)$/)) {
        _type = [_type];
      }
      if (_t === null || _t === 'Function') {
        _type = ['*'];
      }
    }
    _check = function(item) {
      var i, len;
      for (i = 0, len = _type.length; i < len; i++) {
        _t = _type[i];
        if ((typeof _t === 'string') && _t.match(/^(\*|ALL)$/)) {
          return true;
        }
        if (!(_t = SchemaRoller.getClass(_t))) {
          return false;
        }
        if (!objUtil.isOfType(item, _t)) {
          return false;
        }
      }
      return true;
    };
    this.getItemAt = (function(_this) {
      return function(idx) {
        if (_list.length = idx + 1) {
          return _list[idx];
        } else {
          return null;
        }
      };
    })(this);
    this.setItemAt = (function(_this) {
      return function(idx, item) {
        if (!_check(item)) {
          return false;
        }
        _list.splice(idx, 0, item);
        return _this;
      };
    })(this);
    this.removeItemAt = (function(_this) {
      return function(idx, item) {
        if (!(idx <= _list.length)) {
          return false;
        }
        return _list.splice(idx, 1, item);
      };
    })(this);
    this.replaceAll = (function(_this) {
      return function(array) {
        var i, itm, len;
        _this.reset();
        for (i = 0, len = array.length; i < len; i++) {
          itm = array[i];
          _this.addItem(itm);
        }
        return _this;
      };
    })(this);
    this.replaceItemAt = (function(_this) {
      return function(idx, item) {
        if (!_check(item)) {
          return false;
        }
        if (!(idx <= _list.length)) {
          return false;
        }
        if (idx <= _list.length) {
          _list.splice(idx, 1);
        }
        return _this;
      };
    })(this);
    this.addItem = (function(_this) {
      return function(item) {
        return _this.setItemAt(_list.length, item);
      };
    })(this);
    this.shift = (function(_this) {
      return function() {
        return _list.shift();
      };
    })(this);
    this.unshift = (function(_this) {
      return function() {
        var items;
        items = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        items.forEach(function(item) {
          return _this.setItemAt(0, item);
        });
        return _this;
      };
    })(this);
    this.pop = (function(_this) {
      return function() {
        return _list.shift();
      };
    })(this);
    this.push = (function(_this) {
      return function() {
        var items;
        items = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        items.forEach(function(item) {
          return _this.addItem(item);
        });
        return _this;
      };
    })(this);
    this.reset = (function(_this) {
      return function() {
        _list = [];
        return _this;
      };
    })(this);
    this.length = (function(_this) {
      return function() {
        return _list.length;
      };
    })(this);
    this.sort = (function(_this) {
      return function(func) {
        _list.sort(func);
        return _this;
      };
    })(this);
    this.values = (function(_this) {
      return function() {
        return _list.values();
      };
    })(this);
    this.toString = (function(_this) {
      return function() {
        return _list.toString();
      };
    })(this);
    if (items != null) {
      this.push(items);
    }
  }

  return Vector;

})();

SchemaRoller = (require('./schemaroller'))();

module.exports = Vector;
